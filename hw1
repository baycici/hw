// Created by prof. Mingu Kang @VVIP Lab in UCSD ECE department
// Please do not spread this code without permission 
module mac (out, A, B, format, acc, clk, reset);

parameter bw = 8;
parameter psum_bw = 16;

input clk;
input acc;
input reset;
input format;

input signed [bw-1:0] A;
input signed [bw-1:0] B;

output signed [psum_bw-1:0] out;

reg signed [psum_bw-1:0] psum_q;
reg signed [bw-1:0] a_q;
reg signed [bw-1:0] b_q;



// Your code goes here

wire [bw-1:0] real_a;
wire [bw-1:0] real_b;



assign real_a= format ? {A[bw-1],( A[bw-1] ? (~A[bw-2:0]+8'd1):A[bw-2:0])}: A;

assign real_b= format ? {B[bw-1],( B[bw-1] ? (~B[bw-2:0]+8'd1):B[bw-2:0])}: B;

always@(posedge clk) begin

if(reset) begin
psum_q<=16'd0;
end
else begin
psum_q<= acc ? psum_q+(real_a*real_b):psum_q;
end

end

assign out= format ? {psum_q[psum_bw-1],(psum_q[psum_bw-1] ? (~psum_q[psum_bw-2:0]+16'd1):psum_q[psum_bw-2:0])}: psum_q;


endmodule
